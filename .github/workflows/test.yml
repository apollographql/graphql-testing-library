name: Run

on: [push]

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  install-and-cache:
    name: Install and cache
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 9
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

  test-vitest:
    name: Vitest tests
    if: github.repository == 'apollographql/graphql-testing-library'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Run Vitest tests
        run: pnpm run test:vitest

  test-jest:
    name: Jest tests
    if: github.repository == 'apollographql/graphql-testing-library'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Run Jest tests
        run: pnpm run test:jest --coverage | tee ./coverage.txt && exit ${PIPESTATUS[0]}

      - name: Jest Coverage Comment
        id: coverageComment
        uses: MishaKav/jest-coverage-comment@main
        with:
          coverage-path: ./coverage.txt
          junitxml-path: ./coverage/junit.xml

      - name: Check the output coverage
        run: |
          echo "Summary Report"
          echo "Coverage Percentage - ${{ steps.coverageComment.outputs.coverage }}"
          echo "Coverage Color - ${{ steps.coverageComment.outputs.color }}"
          echo "Summary Html - ${{ steps.coverageComment.outputs.summaryHtml }}"

          echo "JUnit Report"
          echo "tests - ${{ steps.coverageComment.outputs.tests }}"
          echo "skipped - ${{ steps.coverageComment.outputs.skipped }}"
          echo "failures - ${{ steps.coverageComment.outputs.failures }}"
          echo "errors - ${{ steps.coverageComment.outputs.errors }}"
          echo "time - ${{ steps.coverageComment.outputs.time }}"

          echo "Coverage Report"
          echo "lines - ${{ steps.coverageComment.outputs.lines }}"
          echo "branches - ${{ steps.coverageComment.outputs.branches }}"
          echo "functions - ${{ steps.coverageComment.outputs.functions }}"
          echo "statements - ${{ steps.coverageComment.outputs.statements }}"
          echo "coverage - ${{ steps.coverageComment.outputs.coverage }}"
          echo "color - ${{ steps.coverageComment.outputs.color }}"
          echo "Coverage Html - ${{ steps.coverageComment.outputs.coverageHtml }}"

      - name: Create the badge
        if: github.ref == 'refs/heads/main'
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GIST_BADGE_SECRET_CLASSIC }}
          gistID: 3fd56e82b55e134ee9cf57f28b0b3d49
          filename: jest-coverage-comment__main.json
          label: coverage
          host: https://api.github.com/gists/
          message: ${{ steps.coverageComment.outputs.coverage }}%
          color: ${{ steps.coverageComment.outputs.color }}
          namedLogo: typescript

  test-playwright:
    name: Playwright tests
    if: github.repository == 'apollographql/graphql-testing-library'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Get installed Playwright version
        id: playwright-version
        run: echo "PLAYWRIGHT_VERSION=$(node -e "console.log(require('./package.json').devDependencies['@playwright/test'])")" >> $GITHUB_ENV

      - name: Cache Playwright binaries
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}

      - run: npx playwright install --with-deps
        if: steps.playwright-cache.outputs.cache-hit != 'true'

      - name: Serve Storybook and run tests
        run: pnpm run build-and-test-storybook

  lint:
    name: Lint
    if: github.repository == 'apollographql/graphql-testing-library'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Lint
        run: pnpm run lint

  prettier:
    name: Prettier
    if: github.repository == 'apollographql/graphql-testing-library'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Lint
        run: pnpm run lint

  type-check:
    name: Check types
    if: github.repository == 'apollographql/graphql-testing-library'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Check types
        run: pnpm run type-check
