import { gql } from "@apollo/client";
import { hasDirectives } from "@apollo/client/utilities";
import { execute } from "@graphql-tools/executor";
import type { ExecutionResult, GraphQLSchema } from "graphql";
import { HttpResponse, graphql } from "msw";

// import { execute, experimentalExecuteIncrementally } from 'graphql';
// import { createSchemaWithResolvers } from "../automockedProvider/AutomockedProvider";
// import { ResolverMap } from "../resolver-types";

const encoder = new TextEncoder();

export function replaceSchema(newSchema: GraphQLSchema) {
  const oldSchema = testSchema;
  testSchema = newSchema;

  function restore() {
    testSchema = oldSchema;
  }

  return Object.assign(restore, {
    [Symbol.dispose]() {
      restore();
    },
  });
}

export const createHandler = (schema: GraphQLSchema) => {
  // Intercept all GraphQL operations and return a response generated by the
  // test schema. Add additional handlers as needed.
  return graphql.operation<
    ExecutionResult<Record<string, unknown>, Record<string, unknown>>
    // @ts-expect-error FIXME: mismatch on the return type between HttpResponse
    // with a stream vs. json
  >(async ({ query, variables, operationName }) => {
    const document = gql(query);
    const hasDefer = hasDirectives(["defer"], document);
    const BOUNDARY = "graphql";

    if (hasDefer) {
      // create ReadableStream with result
      const result = await execute({
        document,
        operationName,
        schema,
        variableValues: variables,
      });

      const contentType = "Content-Type: application/json";
      const boundary = `--${BOUNDARY}`;
      const terminatingBoundary = `--${BOUNDARY}--`;

      const chunks: Array<string> = [];
      if ("initialResult" in result) {
        chunks.push(
          boundary,
          contentType,
          "",
          JSON.stringify(result.initialResult)
        );
      }

      let finished = false;
      if ("subsequentResults" in result) {
        while (!finished) {
          // eslint-disable-next-line no-await-in-loop
          const nextResult = await result.subsequentResults.next();
          chunks.push(
            boundary,
            contentType,
            "",
            JSON.stringify(nextResult.value)
          );

          if (!nextResult.hasNext) {
            finished = true;
            chunks.push(terminatingBoundary);
          }
        }
      }

      const stream = new ReadableStream({
        start(controller) {
          try {
            for (const c of chunks) {
              controller.enqueue(encoder.encode(`${c}\r\n`));
            }
          } finally {
            controller.close();
          }
        },
      });

      return new HttpResponse(stream, {
        headers: {
          "Content-Type": "multipart/mixed",
        },
      });
    } else {
      const result = await execute({
        document,
        operationName,
        schema,
        variableValues: variables,
      });
      // @ts-expect-error error type mismatch
      return HttpResponse.json(result);
    }
  });
};
